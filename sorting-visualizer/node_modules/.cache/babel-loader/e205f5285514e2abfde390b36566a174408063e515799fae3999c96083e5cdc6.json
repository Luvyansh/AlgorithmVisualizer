{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anurag Pandey\\\\Documents\\\\Projects\\\\sorting-visualizer\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../SortingAlgorithms/SortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMATION_SPEED_MS = 10;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'linear-gradient(180deg, #FF7A89, #C1666B)';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'linear-gradient(180deg, #6DD5FA, #2980B9)';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      showMergeSortDescription: false // New state to control visibility\n    };\n  }\n  componentDidMount() {\n    this.resetArray();\n  }\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < 150; i++) {\n      array.push(randomIntFromInterval(5, 650));\n    }\n    this.setState({\n      array,\n      showMergeSortDescription: false\n    }); // Hide description when generating a new array\n  }\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    this.setState({\n      showMergeSortDescription: true\n    }); // Show description on Merge Sort button click\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.background = color;\n          barTwoStyle.background = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  quickSort() {}\n  heapSort() {}\n  bubbleSort() {}\n  render() {\n    const {\n      array,\n      showMergeSortDescription\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-container\",\n        children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            height: `${value}px`\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"generate-array\",\n        onClick: () => this.resetArray(),\n        children: \"Generate New Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sort-button\",\n        onClick: () => this.mergeSort(),\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sort-button\",\n        onClick: () => this.quickSort(),\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sort-button\",\n        onClick: () => this.heapSort(),\n        children: \"Heap Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sort-button\",\n        onClick: () => this.bubbleSort(),\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"profile\",\n        onClick: () => window.open(\"https://luvs-portfolio.web.app\"),\n        children: \"Visit my profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), showMergeSortDescription && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"description\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this), \" is a divide-and-conquer algorithm which divides the array into smaller chunks and sorts them individually. Its time complexity is \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"O(nlogn)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 48\n        }, this), \" in the best and worst case, making it a very efficient sorting algorithm.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n}\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"names":["React","getMergeSortAnimations","jsxDEV","_jsxDEV","ANIMATION_SPEED_MS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","showMergeSortDescription","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","background","newHeight","height","quickSort","heapSort","bubbleSort","render","children","className","map","value","idx","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","open","min","max","Math","floor","random"],"sources":["C:/Users/Anurag Pandey/Documents/Projects/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"sourcesContent":["import React from 'react';\r\nimport { getMergeSortAnimations } from '../SortingAlgorithms/SortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'linear-gradient(180deg, #FF7A89, #C1666B)';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'linear-gradient(180deg, #6DD5FA, #2980B9)';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            showMergeSortDescription: false, // New state to control visibility\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < 150; i++) {\r\n            array.push(randomIntFromInterval(5, 650));\r\n        }\r\n        this.setState({ array, showMergeSortDescription: false }); // Hide description when generating a new array\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        this.setState({ showMergeSortDescription: true }); // Show description on Merge Sort button click\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.background = color;\r\n                    barTwoStyle.background = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {}\r\n\r\n    heapSort() {}\r\n\r\n    bubbleSort() {}\r\n\r\n    render() {\r\n        const { array, showMergeSortDescription } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div className=\"array-bar\" key={idx} style={{ height: `${value}px` }}>\r\n                            {/* {value} */}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <button className=\"generate-array\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n                <button className=\"sort-button\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                <button className=\"sort-button\" onClick={() => this.quickSort()}>Quick Sort</button>\r\n                <button className=\"sort-button\" onClick={() => this.heapSort()}>Heap Sort</button>\r\n                <button className=\"sort-button\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                <button className=\"profile\" onClick={() => window.open(\"https://luvs-portfolio.web.app\")}>Visit my profile</button>\r\n                {showMergeSortDescription && (\r\n                    <p className=\"description\">\r\n                        <b>Merge Sort</b> is a divide-and-conquer algorithm which divides the array into smaller chunks and sorts them individually. \r\n                        Its time complexity is <b>O(nlogn)</b> in the best and worst case, making it a very efficient sorting algorithm.\r\n                    </p>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}