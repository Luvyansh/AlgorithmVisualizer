{"ast":null,"code":"// export const mergeSort = (array, animations = []) => {\n//     if (array.length === 1) return array;\n//     const middleIdx = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, middleIdx));\n//     const secondHalf = mergeSort(array.slice(middleIdx));\n//     let i = 0, j = 0, k = 0;\n//     let sortedArray = [];\n//     while (i < firstHalf.length && j < secondHalf.length) {\n//         if (firstHalf[i] < secondHalf[j]) {\n//             sortedArray[k] = firstHalf[i];\n//             i++;\n//         }\n//         else {\n//             sortedArray[k] = secondHalf[j];\n//             j++;\n//         }\n//         k++;\n//     }\n//     while (i < firstHalf.length) {\n//         sortedArray[k] = firstHalf[i];\n//         i++;\n//         k++;\n//     }\n//     while (j < secondHalf.length) {\n//         sortedArray[k] = secondHalf[j];\n//         j++;\n//         k++;\n//     }\n//     return sortedArray;\n// }\n\n// export function mergeSort(array) {\n//     const animations = [];\n//     if (array.length <= 1) return array;\n//     const auxiliaryArray = array.slice();\n//     mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n//     return animations;\n// }\n\n// function mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n//     if (startIdx === endIdx) return;\n//     const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//     mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n//     mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n//     doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n\n// }\n\n// const animation = {};\n\n// function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n//     let i = startIdx;\n//     let j = middleIdx + 1;\n//     let k = startIdx;\n//     while (i <= middleIdx && j <= endIdx) {\n//         animation.push([i, j]);\n//         animation.push([i, j]);\n//         animation.comparison = [i, j];\n//         if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n//             animation.swap = [k, i];\n//             mainArray[k++] = auxiliaryArray[i++];\n//         }\n//         else {\n//             animation.swap = [k, j];\n//             mainArray[k++] = auxiliaryArray[j++];\n//         }\n//         k++;\n//         animations.push(animation);\n//     }\n//     while (i <= middleIdx) {\n//         animations.push({\n//             comparison: [i, i],\n//             swap: [k, i],\n//         });\n//         mainArray[k++] = auxiliaryArray[i++];\n//     }\n//     while (j <= endIdx) {\n//         animations.push({\n//             comparison: [j, j],\n//             swap: [k, j],\n//         })\n//         mainArray[k++] = auxiliaryArray[j++];\n//     }\n//     doMerge\n// }\n\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push"],"sources":["C:/Users/Anurag Pandey/Documents/Projects/sorting-visualizer/src/SortingAlgorithms/SortingAlgorithms.js"],"sourcesContent":["// export const mergeSort = (array, animations = []) => {\r\n//     if (array.length === 1) return array;\r\n//     const middleIdx = Math.floor(array.length / 2);\r\n//     const firstHalf = mergeSort(array.slice(0, middleIdx));\r\n//     const secondHalf = mergeSort(array.slice(middleIdx));\r\n//     let i = 0, j = 0, k = 0;\r\n//     let sortedArray = [];\r\n//     while (i < firstHalf.length && j < secondHalf.length) {\r\n//         if (firstHalf[i] < secondHalf[j]) {\r\n//             sortedArray[k] = firstHalf[i];\r\n//             i++;\r\n//         }\r\n//         else {\r\n//             sortedArray[k] = secondHalf[j];\r\n//             j++;\r\n//         }\r\n//         k++;\r\n//     }\r\n//     while (i < firstHalf.length) {\r\n//         sortedArray[k] = firstHalf[i];\r\n//         i++;\r\n//         k++;\r\n//     }\r\n//     while (j < secondHalf.length) {\r\n//         sortedArray[k] = secondHalf[j];\r\n//         j++;\r\n//         k++;\r\n//     }\r\n//     return sortedArray;\r\n// }\r\n\r\n// export function mergeSort(array) {\r\n//     const animations = [];\r\n//     if (array.length <= 1) return array;\r\n//     const auxiliaryArray = array.slice();\r\n//     mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n//     return animations;\r\n// }\r\n\r\n// function mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n//     if (startIdx === endIdx) return;\r\n//     const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n//     mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n//     mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n//     doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n\r\n// }\r\n\r\n// const animation = {};\r\n\r\n// function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n//     let i = startIdx;\r\n//     let j = middleIdx + 1;\r\n//     let k = startIdx;\r\n//     while (i <= middleIdx && j <= endIdx) {\r\n//         animation.push([i, j]);\r\n//         animation.push([i, j]);\r\n//         animation.comparison = [i, j];\r\n//         if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n//             animation.swap = [k, i];\r\n//             mainArray[k++] = auxiliaryArray[i++];\r\n//         }\r\n//         else {\r\n//             animation.swap = [k, j];\r\n//             mainArray[k++] = auxiliaryArray[j++];\r\n//         }\r\n//         k++;\r\n//         animations.push(animation);\r\n//     }\r\n//     while (i <= middleIdx) {\r\n//         animations.push({\r\n//             comparison: [i, i],\r\n//             swap: [k, i],\r\n//         });\r\n//         mainArray[k++] = auxiliaryArray[i++];\r\n//     }\r\n//     while (j <= endIdx) {\r\n//         animations.push({\r\n//             comparison: [j, j],\r\n//             swap: [k, j],\r\n//         })\r\n//         mainArray[k++] = auxiliaryArray[j++];\r\n//     }\r\n//     doMerge\r\n// }\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}