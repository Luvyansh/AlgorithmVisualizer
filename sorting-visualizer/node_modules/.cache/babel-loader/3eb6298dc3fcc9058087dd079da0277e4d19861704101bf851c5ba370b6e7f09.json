{"ast":null,"code":"// export const mergeSort = (array, animations = []) => {\n// import { mergeSort } from './../sortingAlgos/SortingAlgorithms';\n//     if (array.length === 1) return array;\n//     const middleIdx = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, middleIdx));\n//     const secondHalf = mergeSort(array.slice(middleIdx));\n//     let i = 0, j = 0, k = 0;\n//     let sortedArray = [];\n//     while (i < firstHalf.length && j < secondHalf.length) {\n//         if (firstHalf[i] < secondHalf[j]) {\n//             sortedArray[k] = firstHalf[i];\n//             i++;\n//         }\n//         else {\n//             sortedArray[k] = secondHalf[j];\n//             j++;\n//         }\n//         k++;\n//     }\n//     while (i < firstHalf.length) {\n//         sortedArray[k] = firstHalf[i];\n//         i++;\n//         k++;\n//     }\n//     while (j < secondHalf.length) {\n//         sortedArray[k] = secondHalf[j];\n//         j++;\n//         k++;\n//     }\n//     return sortedArray;\n// }\n\nexport function mergeSort(array) {\n  const animations = [];\n  if (array.length === 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let i = startIdx;\n  let j = middleIdx + 1;\n  let k = startIdx;\n  while (i <= middleIdx && j <= endIdx) {\n    const animation = {};\n    animation.comparison = [i, j];\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animation.swap = [k, i];\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animation.swap = [k, j];\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n    k++;\n    animations.push(animation);\n  }\n  while (i <= middleIdx) {\n    animations.push({\n      comparison: [i, i],\n      swap: [k, i]\n    });\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push({\n      comparison: [j, j],\n      swap: [k, j]\n    });\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n  doMerge;\n}","map":{"version":3,"names":["mergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","i","j","k","animation","comparison","swap","push"],"sources":["C:/Users/Anurag Pandey/Documents/Projects/sorting-visualizer/src/SortingAlgorithms/SortingAlgorithms.js"],"sourcesContent":["// export const mergeSort = (array, animations = []) => {\r\n// import { mergeSort } from './../sortingAlgos/SortingAlgorithms';\r\n//     if (array.length === 1) return array;\r\n//     const middleIdx = Math.floor(array.length / 2);\r\n//     const firstHalf = mergeSort(array.slice(0, middleIdx));\r\n//     const secondHalf = mergeSort(array.slice(middleIdx));\r\n//     let i = 0, j = 0, k = 0;\r\n//     let sortedArray = [];\r\n//     while (i < firstHalf.length && j < secondHalf.length) {\r\n//         if (firstHalf[i] < secondHalf[j]) {\r\n//             sortedArray[k] = firstHalf[i];\r\n//             i++;\r\n//         }\r\n//         else {\r\n//             sortedArray[k] = secondHalf[j];\r\n//             j++;\r\n//         }\r\n//         k++;\r\n//     }\r\n//     while (i < firstHalf.length) {\r\n//         sortedArray[k] = firstHalf[i];\r\n//         i++;\r\n//         k++;\r\n//     }\r\n//     while (j < secondHalf.length) {\r\n//         sortedArray[k] = secondHalf[j];\r\n//         j++;\r\n//         k++;\r\n//     }\r\n//     return sortedArray;\r\n// }\r\n\r\nexport function mergeSort(array) {\r\n    const animations = [];\r\n    if (array.length === 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    let k = startIdx;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        const animation = {};\r\n        animation.comparison = [i, j];\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animation.swap = [k, i];\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        }\r\n        else {\r\n            animation.swap = [k, j];\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n        k++;\r\n        animations.push(animation);\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push({\r\n            comparison: [i, i],\r\n            swap: [k, i],\r\n        });\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push({\r\n            comparison: [j, j],\r\n            swap: [k, j],\r\n        })\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n    doMerge\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}